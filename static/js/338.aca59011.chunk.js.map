{"version":3,"file":"static/js/338.aca59011.chunk.js","mappings":"4MACA,GAAgB,UAAY,+BAA+B,UAAY,+BAA+B,UAAY,gC,sCC2FlH,EAtFoB,WAClB,IAAAA,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA4BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAClBG,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IA0BvBC,EAAe,SAAAC,GACnB,IAAAC,EAAwBD,EAAIE,OAApBd,EAAIa,EAAJb,KAAMe,EAAKF,EAALE,MACD,SAATf,EACFC,EAAQc,GACU,WAATf,GACTK,EAAUU,EAEd,EAGMC,EAAQ,WACZf,EAAQ,IACRI,EAAU,GACZ,EAEA,OACEY,EAAAA,EAAAA,MAAA,QAAMC,SAvCa,SAAAN,GACnBA,EAAIO,iBAGJ,IAAMC,EAAgBpB,EAAKqB,cAGPb,EAASc,MAC3B,SAAAC,GAAO,OAAIA,EAAQvB,KAAKqB,gBAAkBD,CAAa,IAKvDI,MAAM,GAADC,OAAIzB,EAAI,gHAKfM,GAASoB,EAAAA,EAAAA,IAAW,CAAE1B,KAAAA,EAAMI,OAAAA,KAC5BY,IACF,EAmBgCW,UAAWC,EAAAA,KAASC,SAAA,EAChDC,EAAAA,EAAAA,KAAA,SAAOC,QAAQ,OAAOJ,UAAWC,EAAAA,UAAcC,UAC7CC,EAAAA,EAAAA,KAAA,SACEE,KAAK,OACLhC,KAAK,OACLiC,QACE,2HAEFC,MAAM,0IACNC,UAAQ,EACRpB,MAAOf,EACPoC,SAAUzB,EACV0B,GAAIrC,EACJ2B,UAAWC,EAAAA,UACXU,YAAY,YAIhBR,EAAAA,EAAAA,KAAA,SAAOC,QAAQ,SAASJ,UAAWC,EAAAA,UAAcC,UAC/CC,EAAAA,EAAAA,KAAA,SACEE,KAAK,MACLhC,KAAK,SACLiC,QAAQ,qGACRC,MAAM,gGACNC,UAAQ,EACRpB,MAAOX,EACPgC,SAAUzB,EACV0B,GAAIjC,EACJuB,UAAWC,EAAAA,UACXU,YAAY,cAIhBR,EAAAA,EAAAA,KAAA,UAAQE,KAAK,SAASL,UAAWC,EAAAA,UAAcC,SAAC,WAKtD,EC/EA,EARsB,WACpB,OACEC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACS,EAAW,KAGlB,C","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","pages/AddConactPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formLabel\":\"ContactForm_formLabel__TSwxK\",\"inputText\":\"ContactForm_inputText__pOiDY\",\"addButton\":\"ContactForm_addButton__zGNsx\"};","import React, { useState } from 'react';\nimport css from 'components/ContactForm/ContactForm.module.css';\nimport { addContact } from 'redux/operation';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  // Обработчик отправки формы\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    // Приводим введенное имя к нижнему регистру для сравнения\n    const normalizeName = name.toLowerCase();\n\n    // Проверяем, есть ли контакт с таким именем в контактах\n    const isDuplicate = contacts.some(\n      contact => contact.name.toLowerCase() === normalizeName\n    );\n\n    // Если найден дубликат, выводим сообщение об этом\n    if (isDuplicate) {\n      alert(`${name} уже есть в контактах`);\n      return;\n    }\n\n    // Отправляем новый контакт в Redux хранилище\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  // Обработчик изменения значений полей input\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  // Функция для сброса значений полей в исходное состояние\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.form}>\n      <label htmlFor=\"name\" className={css.formLabel}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern={\n            \"^[a-zA-Zа-яА-Я]+(([' \\\\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          }\n          title=\"Name may contain only letters, apostrophe, dash, and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n          id={name}\n          className={css.inputText}\n          placeholder=\"Name\"\n        />\n      </label>\n\n      <label htmlFor=\"number\" className={css.formLabel}>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses, and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n          id={number}\n          className={css.inputText}\n          placeholder=\"Number\"\n        />\n      </label>\n\n      <button type=\"submit\" className={css.addButton}>\n        Save\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport ContactForm from 'components/ContactForm/ContactForm';\n\nconst AddConactPage = () => {\n  return (\n    <div>\n      <ContactForm />\n    </div>\n  );\n};\n\nexport default AddConactPage;\n"],"names":["_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","dispatch","useDispatch","contacts","useSelector","selectContacts","handleChange","evt","_evt$target","target","value","reset","_jsxs","onSubmit","preventDefault","normalizeName","toLowerCase","some","contact","alert","concat","addContact","className","css","children","_jsx","htmlFor","type","pattern","title","required","onChange","id","placeholder","ContactForm"],"sourceRoot":""}