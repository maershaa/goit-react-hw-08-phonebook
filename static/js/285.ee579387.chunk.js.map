{"version":3,"file":"static/js/285.ee579387.chunk.js","mappings":"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","sources":["pages/Register.jsx","redux/auth/auth.operation.js"],"sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { registerThunk } from 'redux/auth/auth.operation';\n\nconst Register = () => {\n  const dispatch = useDispatch();\n\n  // Функция обработки отправки формы регистрации\n  const onSubmit = e => {\n    e.preventDefault(); // Предотвращение стандартного поведения формы\n    // Получение значений полей формы\n    const name = e.currentTarget.elements.userName.value;\n    const email = e.currentTarget.elements.userEmail.value;\n    const password = e.currentTarget.elements.userPassword.value;\n    const formData = {\n      name,\n      email,\n      password,\n    };\n\n    // Отправка данных формы в хранилище для регистрации\n    dispatch(registerThunk(formData));\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <label>\n        <p>Name:</p>\n        <input type=\"text\" placeholder=\"Full name\" required name=\"userName\" />\n      </label>\n      <label>\n        <p>Email:</p>\n        <input\n          type=\"email\"\n          placeholder=\"Email adress\"\n          required\n          name=\"userEmail\"\n        />\n      </label>\n      <label>\n        <p>Password:</p>\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          required\n          name=\"userPassword\"\n        />\n      </label>\n      <br />\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  );\n};\n\nexport default Register;\n","import axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\n// Создание экземпляра Axios с предустановленными параметрами\n// 'instance' представляет собой экземпляр Axios, который будет использоваться для всех запросов\n// Он создан с помощью axios.create() с определенными настройками, такими как baseURL\n// Данный экземпляр будет автоматически добавлять заголовок Authorization к каждому запросу\nexport const instance = axios.create({\n  baseURL: 'https://connections-api.herokuapp.com/',\n});\n\n// Функция setToken устанавливает заголовок Authorization для всех запросов Axios\n// Функция setToken позволяет установить токен авторизации, который будет использоваться в этом экземпляре Axios\nconst setToken = token => {\n  instance.defaults.headers.common.Authorization = `Bearer ${token}`;\n};\n\n// !Создание санки для асинхронного входа пользователя\nexport const loginThunk = createAsyncThunk(\n  'auth/login',\n  async (formData, thunkApi) => {\n    try {\n      // Отправка POST-запроса на сервер для входа пользователя\n      const { data } = await instance.post('/users/login', formData);\n      // Установка токена авторизации в экземпляре Axios\n      setToken(data.token);\n\n      return data;\n    } catch (err) {\n      return thunkApi.rejectWithValue(err.message);\n    }\n  }\n);\n\n// !Создание санки для регистрации нового пользователя\nexport const registerThunk = createAsyncThunk(\n  'auth/register',\n  async (formData, thunkApi) => {\n    try {\n      // Отправка POST-запроса на сервер для регистрации пользователя\n      const { data } = await instance.post('/users/signup', formData);\n      // Установка токена авторизации в экземпляре Axios\n      setToken(data.token);\n\n      return data;\n    } catch (err) {\n      return thunkApi.rejectWithValue(err.message);\n    }\n  }\n);\n\n// !Создание санки для выхода пользователя\nexport const logOutThunk = createAsyncThunk(\n  'auth/logOut',\n  async (_, thunkApi) => {\n    try {\n      // Отправка POST-запроса на сервер для выхода пользователя\n      const { data } = await instance.post('/users/logout');\n\n      return data;\n    } catch (err) {\n      return thunkApi.rejectWithValue(err.message);\n    }\n  }\n);\n\n// !Создание санки для обновления данных пользователя\nexport const refreshThunk = createAsyncThunk(\n  'auth/refresh',\n  async (_, thunkApi) => {\n    try {\n      // Получение токена из хранилища Redux\n      const state = thunkApi.getState();\n      const token = state.auth.token;\n      // Установка токена авторизации в экземпляре Axios\n      setToken(token);\n      // Получение текущих данных пользователя с сервера\n      const { data } = await instance.get('/users/current');\n\n      return data;\n    } catch (err) {\n      return thunkApi.rejectWithValue(err.message);\n    }\n  },\n  {\n    // Условие выполнения санки: проверка на наличие токена в хранилище Redux\n    condition: (_, thunkApi) => {\n      const state = thunkApi.getState();\n      const token = state.auth.token;\n      if (!token) return false; // В случае отсутствия токена выполнение не произойдет\n      return true;\n    },\n  }\n);\n"],"names":["dispatch","useDispatch","_jsxs","onSubmit","e","preventDefault","formData","name","currentTarget","elements","userName","value","email","userEmail","password","userPassword","registerThunk","children","_jsx","type","placeholder","required","instance","axios","baseURL","setToken","token","defaults","headers","common","Authorization","concat","loginThunk","createAsyncThunk","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","thunkApi","_yield$instance$post","data","_context","prev","next","post","sent","abrupt","t0","rejectWithValue","message","stop","_x","_x2","apply","arguments","_ref2","_callee2","_yield$instance$post2","_context2","_x3","_x4","_ref3","_callee3","_","_yield$instance$post3","_context3","_x5","_x6","_ref4","_callee4","state","_yield$instance$get","_context4","getState","auth","get","_x7","_x8","condition"],"sourceRoot":""}